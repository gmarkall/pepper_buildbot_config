# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from buildbot.process import buildstep
from twisted.internet import defer
from buildbot.schedulers.forcesched import StringParameter
import secretstuff
import os

c = BuildmasterConfig = {}

c['slaves'] = [buildslave.BuildSlave("fedora23", secretstuff.slavepass)]
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

c['change_source'] = []

####### SCHEDULERS

builderNames = ["riscv-llvm", "rocket-chip", "rocket-chip-emu",
                "rocket-chip-beebs", "clean-rocket-chip",
                "aap-test-override-refresh", "aap-test-override-sync",
                "mageec-beebs"]

c['schedulers'] = []
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=builderNames))

c['schedulers'].append(schedulers.ForceScheduler(
                            name='force-beebs-plot',
                            builderNames=['rocket-chip-beebs-plot'],
                            properties=[StringParameter('beebs-build-num', 'Beebs build number:')]))

####### BUILDERS

c['builders'] = []

### RISC-V builders

def riscv_llvm_builder():
    f = util.BuildFactory()
    f.addStep(steps.Git(repourl='git://github.com/riscv/riscv-llvm.git',
        submodules=True, mode='full', method='fresh', branch='riscv-trunk'))
    f.addStep(steps.ShellCommand(command=['mkdir', 'build']))
    f.addStep(steps.ShellCommand(command=["cmake", "-DCMAKE_BUILD_TYPE=Release",
        "-DLLVM_TARGETS_TO_BUILD=RISCV", ".."], haltOnFailure=True,
        workdir='build/build'))
    f.addStep(steps.ShellCommand(command=["make", "-j10"], haltOnFailure=True,
        workdir='build/build'))
    f.addStep(steps.ShellCommand(command=["make", "check-llvm-codegen-riscv",
        "check-llvm-mc-riscv"], haltOnFailure=True, workdir='build/build'))

    return util.BuilderConfig(name='riscv-llvm', slavenames=['fedora23'],
        factory=f, tags=["riscv", "llvm"])

basedirs = { 'fedora23': '/home/graham/ci/version_f43636f/fedora23_f53636f' }

def workdir_abspath(slave, builder, workdir='build'):
    return os.path.join(basedirs[slave], builder, workdir)

def rocketchip_env():
    top = workdir_abspath('fedora23', 'rocketchip')
    riscv = os.path.join(basedirs['fedora23'], 'install-rocketchip')
    bindir = os.path.join(riscv, 'bin')

    e = {
        'TOP': top,
        'RISCV': riscv,
        'PATH': '%s:${PATH}' % bindir,
    }

    return e

def rocketchip_builder():
    env = rocketchip_env()

    f = util.BuildFactory()
    f.addStep(steps.Git(repourl='git://github.com/gmarkall/rocket-chip.git',
        submodules=True, mode='full', method='fresh'))
    # Build the RISC-V tools
    f.addStep(steps.ShellCommand(command=['./build.sh'], env=env,
        workdir='build/riscv-tools', haltOnFailure=True))
    # Check they're around
    f.addStep(steps.ShellCommand(command=['which', 'spike'], env=env,
        haltOnFailure=True))
    f.addStep(steps.ShellCommand(command=['which', 'riscv64-unknown-elf-gcc'],
        env=env, haltOnFailure=True))

    return util.BuilderConfig(name='rocket-chip', slavenames=['fedora23'],
        factory=f, tags=["riscv", "rocketchip"])

def rocketchip_emulator():
    env = rocketchip_env()

    f = util.BuildFactory()
    f.addStep(steps.Git(repourl='git://github.com/gmarkall/rocket-chip.git',
        submodules=True, mode='full', method='fresh', branch='benchmarking'))

    # Build the emulator
    f.addStep(steps.ShellCommand(command=['make'], workdir='build/emulator',
        haltOnFailure=True, env=env))
    # Test the emulator
    f.addStep(steps.ShellCommand(command=['make', 'run-asm-tests'],
        workdir='build/emulator', haltOnFailure=True, env=env))
    f.addStep(steps.ShellCommand(command=['make', 'run-bmark-tests'],
        workdir='build/emulator', haltOnFailure=True, env=env))
    # Install the emulator
    f.addStep(steps.ShellCommand(command=['make', 'install'],
        workdir='build/emulator', haltOnFailure=True, env=env))

    return util.BuilderConfig(name='rocket-chip-emu', slavenames=['fedora23'],
        factory=f, tags=["riscv", "rocketchip"])

def clean_rocketchip():
    env = rocketchip_env()
    f = util.BuildFactory()
    f.addStep(steps.ShellCommand(command=['rm', '-rf', env['RISCV']],
        haltOnFailure=True))

    return util.BuilderConfig(name='clean-rocket-chip', slavenames=['fedora23'],
        factory=f, tags=["riscv", "rocketchip"])

def beebs_rocketchip_builder():
    env = rocketchip_env()

    f = util.BuildFactory()
    f.addStep(steps.Git(repourl='git://github.com/gmarkall/beebs.git',
        submodules=True, mode='full', method='fresh', branch='riscv'))
    f.addStep(steps.ShellCommand(command=['autoreconf'], env=env, haltOnFailure=True))
    f.addStep(steps.ShellCommand(command=['./configure', '--host=riscv64-unknown-elf',
        '--with-chip=riscv64', '--with-board=rocketchipemu',
        '--disable-maintainer-mode'], env=env,
        haltOnFailure=True))
    f.addStep(steps.ShellCommand(command=['make', '-j10'], env=env, haltOnFailure=True))
    f.addStep(steps.ShellCommand(command=['./run-riscv.py'], env=env))
    f.addStep(steps.FileUpload(slavesrc="results.txt",
        masterdest=util.Interpolate("public_html/results-%(prop:buildnumber)s.txt"),
        url=util.Interpolate(secretstuff.buildboturl + 'results-%(prop:buildnumber)s.txt')))
    f.addStep(steps.FileUpload(slavesrc="log_file.txt",
        masterdest=util.Interpolate("public_html/log_file-%(prop:buildnumber)s.txt"),
        url=util.Interpolate(secretstuff.buildboturl + 'log_file-%(prop:buildnumber)s.txt')))

    return util.BuilderConfig(name='rocket-chip-beebs', slavenames=['fedora23'],
        factory=f, tags=["riscv", "beebs", "rocketchip"])

class SetBeebsBuildNumber(buildstep.BuildStep):
    '''
    Custom build step to get the build number of the beebs build and
    set it as a property, if the build number has not already been set.
    '''

    name = 'BEEBS build num'

    def run(self):
        buildnum = self.getProperty('beebs-build-num')
        if not buildnum:
            buildnum =  self.master.status.getBuilder('rocket-chip-beebs').nextBuildNumber - 1
            self.setProperty('beebs-build-num', buildnum, 'Default last build assignment')
        self._step_status.setText('BEEBS build %s' % buildnum)
        return buildstep.SUCCESS

def beebs_result_plotter():
    env = rocketchip_env()

    f = util.BuildFactory()
    f.addStep(steps.Git(repourl='git://github.com/gmarkall/beebs.git',
        submodules=True, mode='full', method='fresh', branch='riscv'))
    f.addStep(SetBeebsBuildNumber())
    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate('public_html/results-%(prop:beebs-build-num)s.txt'),
        slavedest='results.txt'))
    f.addStep(steps.ShellCommand(command=['./plot.py', 'results.txt', 'results.png'], env=env))
    f.addStep(steps.FileUpload(slavesrc="results.png",
        masterdest=util.Interpolate("public_html/results-%(prop:buildnumber)s.png"),
        url=util.Interpolate(secretstuff.buildboturl + 'results-%(prop:buildnumber)s.png')))

    return util.BuilderConfig(name='rocket-chip-beebs-plot', slavenames=['fedora23'],
        factory=f, tags=["riscv","beebs", "rocketchip"])

# Mageec builders

def mageec_beebs_builder():
    f = util.BuildFactory()
    f.addStep(steps.Git(repourl='git://github.com/mageec/beebs.git',
        submodules=True, mode='full', method='fresh', branch='master'))
    f.addStep(steps.ShellCommand(command=['./configure', '--disable-maintainer-mode'],
        haltOnFailure=True))
    f.addStep(steps.ShellCommand(command=['make', '-j10'], haltOnFailure=True))
    f.addStep(steps.ShellCommand(command=['make', 'check'], haltOnFailure=True))

    return util.BuilderConfig(name="mageec-beebs", slavenames=['fedora23'],
        factory=f, tags=['beebs'])


c['builders'].append(riscv_llvm_builder())
c['builders'].append(rocketchip_builder())
c['builders'].append(rocketchip_emulator())
c['builders'].append(beebs_rocketchip_builder())
c['builders'].append(beebs_result_plotter())
c['builders'].append(clean_rocketchip())
c['builders'].append(mageec_beebs_builder())

### AAP Builders

def aap_env(workdir):
    install_bindir = os.path.join(workdir, 'install-master', 'bin')

    e = {
        'PATH': '%s:${PATH}' % install_bindir,
    }

    return e

def aap_toolchain_refresh(name, branch):
    workdir = os.path.join(secretstuff.projectroot, name)
    toolchaindir = os.path.join(workdir, 'toolchain')
    env = aap_env(workdir)

    f = util.BuildFactory()
    f.addStep(steps.ShellCommand(command=['rm','-rf', workdir], haltOnFailure=True))
    f.addStep(steps.ShellCommand(command=['mkdir', workdir], haltOnFailure=True))
    repo_init = [ 'repo', 'init', '-u', 'git@github.com:embecosm/aap-manifest', '-b', branch ]
    f.addStep(steps.ShellCommand(command=repo_init, workdir=workdir, haltOnFailure=True))
    f.addStep(steps.ShellCommand(command=['repo', 'sync'], workdir=workdir, haltOnFailure=True))
    f.addStep(steps.ShellCommand(command=['./build-all-nolog.sh'], workdir=toolchaindir, haltOnFailure=True))

    return util.BuilderConfig(name='%s-refresh' % name, slavenames=['fedora23'],
        factory=f, tags=['aap', 'override'])

def aap_toolchain_sync(name):
    workdir = os.path.join(secretstuff.projectroot, name)
    toolchaindir = os.path.join(workdir, 'toolchain')
    env = aap_env(workdir)

    f = util.BuildFactory()
    f.addStep(steps.ShellCommand(command=['repo', 'sync'], workdir=workdir, haltOnFailure=True))
    f.addStep(steps.ShellCommand(command=['./build-all-nolog.sh'], workdir=toolchaindir, haltOnFailure=True))
    f.addStep(steps.ShellCommand(command=['./run-tests.py'], workdir=toolchaindir, haltOnFailure=True))

    output_dir = os.path.join(toolchaindir, 'test-output')
    outputs = [ 'gcc.log', 'gcc.sum', 'g++.log', 'g++.sum' ]
    for output in outputs:
        f.addStep(steps.FileUpload(slavesrc=os.path.join(output_dir, output),
            masterdest=util.Interpolate(("public_html/%s-" % name) + output + "-%(prop:buildnumber)s.txt"),
            url=util.Interpolate(secretstuff.buildboturl + ("%s-%s" % (name, output)) + '-%(prop:buildnumber)s.txt')))

    return util.BuilderConfig(name='%s-sync' % name, slavenames=['fedora23'],
        factory=f, tags=['aap', 'override'])

def aap_toolchain_for_test_override_refresh():
    return aap_toolchain_refresh('aap-test-override', 'override')

def aap_toolchain_for_test_override_sync():
    return aap_toolchain_sync('aap-test-override')


c['builders'].append(aap_toolchain_for_test_override_refresh())
c['builders'].append(aap_toolchain_for_test_override_sync())

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.words import IRC
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

#irc = IRC(secretstuff.irchost,
#          "buildbot",
#          useColors=True,
#          channels=[{"channel": "#buildbot"}],
#          password=secretstuff.ircpassword,
#          useSSL=True,
#          notify_events={"started", "success", "failure", "exception"})
#
#c['status'].append(irc)


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Kill Jenkins"
c['titleURL'] = "http://www.embecosm.com/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = secretstuff.buildboturl

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
